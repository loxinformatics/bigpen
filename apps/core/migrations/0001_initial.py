# Generated by Django 5.2.3 on 2025-06-16 08:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField(editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('base_name', 'Full Name'), ('base_short_name', 'Short Name'), ('base_description', 'Motto / Description'), ('base_theme_color', 'Theme Color'), ('base_url', 'Website URL'), ('base_author', "Author's Name"), ('base_author_url', "Author's Website URL")], max_length=25, unique=True)),
                ('value', models.CharField(blank=True, help_text='Value for the organization detail.', max_length=255)),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField(editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('base_logo', 'Logo'), ('base_favicon', 'Favicon'), ('base_apple_touch_icon', 'Apple touch icon'), ('base_hero_image', 'Hero / cover image')], max_length=25, unique=True)),
                ('image', models.ImageField(blank=True, help_text='\n            Upload images in recommended sizes: Logo (512x512), Favicon (32x32), Apple Touch Icon (180x180), Hero Image (2560x1440 or 1920x1080).\n            PNG format recommended for logos and icons to preserve transparency. JPG format recommended for hero.\n        ', null=True, upload_to='core/base')),
                ('description', models.TextField(editable=False)),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContactAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order (lower numbers - zero included - appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this should be displayed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('label', models.CharField(help_text='Custom label for this address e.g Main Office Address', max_length=100, unique=True)),
                ('building', models.CharField(blank=True, help_text='Building name or number (e.g., Britam Tower, Block A)', max_length=100)),
                ('street_address', models.CharField(blank=True, help_text='Street address including house number and street name', max_length=255)),
                ('city', models.CharField(blank=True, help_text='City name', max_length=100)),
                ('state_province', models.CharField(blank=True, help_text='State, province, or county (e.g., Vihiga County)', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='ZIP code, postal code, or equivalent', max_length=20)),
                ('country', models.CharField(blank=True, default='Kenya', help_text='Country name', max_length=100)),
                ('map_embed_url', models.URLField(blank=True, help_text='Google Maps/Other map provider embed URL for displaying in iframes', max_length=500)),
                ('use_in_contact_form', models.BooleanField(default=False, help_text='Mark this as the address to use in contact forms and maps. Only one active address can be selected.')),
            ],
            options={
                'verbose_name_plural': 'Contact addresses',
                'ordering': ['order', 'label', 'city'],
            },
        ),
        migrations.CreateModel(
            name='ContactEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order (lower numbers - zero included - appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this should be displayed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(help_text='Email address (e.g., user@example.com)', max_length=254, unique=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Mark as email address to be used in contact forms. If is_active is False, this will be ignored.')),
            ],
            options={
                'ordering': ['order', 'email'],
            },
        ),
        migrations.CreateModel(
            name='ContactNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order (lower numbers - zero included - appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this should be displayed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('number', phonenumber_field.modelfields.PhoneNumberField(help_text='Phone number (e.g., +254712345678 or 0712345678)', max_length=128, region='KE', unique=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Mark as primary phone number. If is_active is False, this will be ignored.')),
                ('use_for_whatsapp', models.BooleanField(default=False, help_text='Whether this phone number should be used for WhatsApp. If is_active is False, this will be ignored.')),
            ],
            options={
                'ordering': ['order', 'number'],
            },
        ),
        migrations.CreateModel(
            name='ContactSocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order (lower numbers - zero included - appear first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this should be displayed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'X (formerly Twitter)'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('youtube', 'YouTube'), ('tiktok', 'TikTok'), ('pinterest', 'Pinterest'), ('snapchat', 'Snapchat'), ('discord', 'Discord'), ('telegram', 'Telegram'), ('github', 'GitHub'), ('reddit', 'Reddit'), ('twitch', 'Twitch')], max_length=20, unique=True)),
                ('icon', models.CharField(blank=True, help_text='Bootstrap icon class (auto-populated based on name)', max_length=50)),
                ('url', models.URLField(help_text='URL to your selected social media profile')),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('display_name', models.CharField(blank=True, help_text='Human-readable name for this role', max_length=100)),
                ('is_staff_role', models.BooleanField(default=False, help_text='Designates whether users with this role can log into this management portal.')),
                ('is_default_role', models.BooleanField(default=False, help_text='New users will be assigned this role by default')),
                ('description', models.TextField(blank=True, help_text="Description of this role's purpose and permissions")),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order (lower numbers - zero included - appear first)')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='core/user')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
